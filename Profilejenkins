pipeline {
    agent {
        docker {
            image 'maven:3.8.1-adoptopenjdk-11'
        }
    }
    stages {
        stage('Build Web Application') {
            steps {
                sh 'mvn clean package' // Use 'clean package' to build a JAR file
            }
        }
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = 'http://3.209.59.238:9000'
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_API_TOKEN')]) {
                    sh "mvn sonar:sonar -Dsonar.login=\$SONAR_API_TOKEN -Dsonar.host.url=\${SONAR_URL}"
                }
            }
        }
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "suba99ee/jenkinsprofile:${BUILD_NUMBER}"
                GITHUB_REPO = 'SubashreeG/jenkins' // Replace with your GitHub repo
                DOCKERFILE_PATH = 'SubashreeG/jenkins/Dockerfile' // Relative path within the GitHub repo
            }
            steps {
                script {
                    // Clone the GitHub repository that contains your Dockerfile
                    sh "git clone https://github.com/SubashreeG/jenkins.git"
                    
                    // Build the Docker image from the cloned repository
                    sh '/usr/bin/docker build -t ${DOCKER_IMAGE} -f /SubashreeG/jenkins/Dockerfile .'

                    
                    // Remove the cloned repository to clean up
                    sh "rm -rf ${GITHUB_REPO}"
                    
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    
                    docker.withRegistry('https://hub.docker.com/repository/docker/suba99ee', "dokcred") {
                        dockerImage.push()
                    }
                }
            }
        }
    }
}
